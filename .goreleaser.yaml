before:
  hooks:
    - go mod tidy

builds:
  - goos:
      - linux
      - darwin
      - freebsd
      # windows is untested, we can start doing windows releases
      # if someone is interested in taking on testing
      # - windows
    env:
      # disable cgo to fix glibc issues: https://github.com/golang/go/issues/58550
      # once we need to enable this, we will need to do per distro releases
      - CGO_ENABLED=0
    main: ./cmd/versitygw
    binary: versitygw
    goarch:
      - amd64
      - arm64
    ldflags:
      - -X=main.Build={{.Commit}} -X=main.BuildTime={{.Date}} -X=main.Version={{.Version}}

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}_v{{ .Version }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}

    # Set this to true if you want all files in the archive to be in a single directory.
    # If set to true and you extract the archive 'goreleaser_Linux_arm64.tar.gz',
    # you'll get a folder 'goreleaser_Linux_arm64'.
    # If set to false, all files are extracted separately.
    # You can also set it to a custom folder name (templating is supported).
    wrap_in_directory: true

    # use zip for windows archives
    format_overrides:
    - goos: windows
      format: zip

    # Additional files/globs you want to add to the archive.
    #
    # Default: [ 'LICENSE*', 'README*', 'CHANGELOG', 'license*', 'readme*', 'changelog']
    # Templates: allowed
    files:
      - README.md
      - LICENSE
      - NOTICE

checksum:
  name_template: 'checksums.txt'

snapshot:
  name_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^Merge '

nfpms:
  - id: packages
    package_name: versitygw
    vendor: Versity Software
    homepage: https://github.com/versity/versitygw
    maintainer: Ben McClelland <ben.mcclelland@versity.com>

    description: |-
      The Versity S3 Gateway.
      A high-performance tool facilitating translation between AWS S3 API
      requests and various backend storage systems, including POSIX file
      backend storage. Its stateless architecture enables deployment in
      clusters for increased throughput, distributing requests across gateways
      for optimal performance. With a focus on modularity, it supports future
      extensions for additional backend systems.

    license: Apache 2.0

    builds:
      - versitygw

    formats:
      - deb
      - rpm

    umask: 0o002
    bindir: /usr/bin
    epoch: "1"
    release: "1"

    rpm:
      group: "System Environment/Daemons"

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj
